import { message } from 'antd'

export interface ApiError {
	message: string
	status?: number
	statusText?: string
}

export interface ErrorDetails {
	title: string
	description: string
	canRetry: boolean
	status?: number
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç API –æ—à–∏–±–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function handleApiError(error: any): ErrorDetails {

	// –°–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
	if (error instanceof TypeError || error.status === 0) {
		return {
			title: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏',
			description: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞',
			canRetry: true,
			status: 0
		}
	}

	// HTTP –æ—à–∏–±–∫–∏
	if (error.status) {
		switch (error.status) {
			case 400:
				return {
					title: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å',
					description: error.message || '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
					canRetry: false,
					status: 400
				}
			case 401:
				return {
					title: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
					description: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É',
					canRetry: false,
					status: 401
				}
			case 404:
				return {
					title: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ',
					description: '–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —Ä–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω',
					canRetry: false,
					status: 404
				}
			case 413:
				return {
					title: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π',
					description: '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π (10MB)',
					canRetry: false,
					status: 413
				}
			case 415:
				return {
					title: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞',
					description: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG, PNG –∏–ª–∏ GIF',
					canRetry: false,
					status: 415
				}
			case 422:
				return {
					title: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
					description: error.message || '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
					canRetry: false,
					status: 422
				}
			case 429:
				return {
					title: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤',
					description: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥',
					canRetry: true,
					status: 429
				}
			case 500:
				return {
					title: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
					description: '–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
					canRetry: true,
					status: 500
				}
			case 502:
			case 503:
			case 504:
				return {
					title: '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
					description: '–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
					canRetry: true,
					status: error.status
				}
			default:
				return {
					title: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
					description: error.message || `–û—à–∏–±–∫–∞ ${error.status}: ${error.statusText || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
					canRetry: error.status >= 500,
					status: error.status
				}
		}
	}

	// –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤
	if (error.message?.includes('—Ä–∞–∑–º–µ—Ä') || error.message?.includes('size')) {
		return {
			title: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π',
			description: '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10MB',
			canRetry: false,
			status: 413
		}
	}

	if (error.message?.includes('—Ç–∏–ø') || error.message?.includes('type')) {
		return {
			title: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞',
			description: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
			canRetry: false,
			status: 415
		}
	}

	// –û–±—â–∞—è –æ—à–∏–±–∫–∞
	return {
		title: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',
		description: error.message || '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ',
		canRetry: true,
		status: undefined
	}
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–≤—Ç–æ—Ä–∞
 */
export function showErrorNotification(error: any, onRetry?: () => void) {
	const errorDetails = handleApiError(error)
	
	// –î–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	if (errorDetails.status === 413 || errorDetails.status === 415 || errorDetails.status === 422) {
		message.error({
			content: `üö® ${errorDetails.title}: ${errorDetails.description}`,
			duration: 8,
			style: {
				marginTop: '20vh',
				fontSize: '16px',
				fontWeight: 'bold'
			}
		})
	} else if (errorDetails.canRetry && onRetry) {
		message.error({
			content: `‚ö†Ô∏è ${errorDetails.title}: ${errorDetails.description}`,
			duration: 6,
			onClick: onRetry,
			style: {
				marginTop: '20vh',
				fontSize: '16px',
				fontWeight: 'bold',
				cursor: 'pointer'
			}
		})
	} else {
		message.error({
			content: `${errorDetails.title}: ${errorDetails.description}`,
			duration: 4
		})
	}
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –º–æ–¥–∞–ª–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export function showRandomModal() {
	console.log('showRandomModal called')
	
	const modalTypes = ['error', 'warning', 'info', 'success']
	const randomType = modalTypes[Math.floor(Math.random() * modalTypes.length)]
	console.log('Random type selected:', randomType)
	
	const baseContent = '–≠—Ç–æ —Å–ª—É—á–∞–π–Ω–∞—è –º–æ–¥–∞–ª–∫–∞ –∏–∑ errorHandler.\n\n–í—Ä–µ–º—è: ' + new Date().toLocaleTimeString() + '\nID: ' + Math.random().toString(36).substr(2, 9)
	
	// –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º message –≤–º–µ—Å—Ç–æ Modal –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	console.log('Using message instead of Modal for testing')
	
	if (randomType === 'error') {
		message.error({
			content: `üö® –°–ª—É—á–∞–π–Ω–∞—è –æ—à–∏–±–∫–∞!\n\n${baseContent}`,
			duration: 8,
			style: { fontSize: '16px', fontWeight: 'bold' }
		})
	} else if (randomType === 'warning') {
		message.warning({
			content: `‚ö†Ô∏è –°–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!\n\n${baseContent}`,
			duration: 8,
			style: { fontSize: '16px', fontWeight: 'bold' }
		})
	} else if (randomType === 'info') {
		message.info({
			content: `‚ÑπÔ∏è –°–ª—É—á–∞–π–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n${baseContent}`,
			duration: 8,
			style: { fontSize: '16px', fontWeight: 'bold' }
		})
	} else if (randomType === 'success') {
		message.success({
			content: `‚úÖ –°–ª—É—á–∞–π–Ω—ã–π —É—Å–ø–µ—Ö!\n\n${baseContent}`,
			duration: 8,
			style: { fontSize: '16px', fontWeight: 'bold' }
		})
	}
	
	console.log('Message shown successfully')
}
